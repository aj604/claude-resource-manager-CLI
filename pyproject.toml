[project]
name = "claude_resource_manager"
version = "0.1.0"
description = "Claude Resource Manager CLI - Interactive TUI for managing Claude resources"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Claude Resource Manager Contributors"}
]
keywords = ["claude", "cli", "tui", "resource-manager"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core
    "textual>=0.47.0",
    "click>=8.1.0",
    "pyyaml>=6.0",

    # Search & Data
    "rapidfuzz>=3.0.0",
    "networkx>=3.0",

    # Utilities
    "pydantic>=2.0",
    "rich>=13.0",
    "httpx>=0.24.0",

    # Performance
    "orjson>=3.9.0",
    "uvloop>=0.19.0; sys_platform != 'win32'",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    "pillow>=10.0.0",  # For VHS GIF validation

    # Code Quality
    "ruff>=0.1.0",
    "black>=23.7.0",
    "mypy>=1.5.0",

    # Security
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pip-audit>=2.6.0",
]

[project.scripts]
claude_resource_manager = "claude_resource_manager.cli:main"
crm = "claude_resource_manager.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/claude_resource_manager"]

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["S101"]      # Allow assert in tests

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

[[tool.mypy.overrides]]
module = [
    "textual.*",
    "networkx.*",
    "rapidfuzz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=claude_resource_manager",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "security: marks tests related to security",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
    "property: marks tests as property-based tests (hypothesis)",
]

[tool.coverage.run]
branch = true
source = ["src/claude_resource_manager"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101"]  # Allow assert in tests
